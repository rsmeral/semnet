package xsmeral.semnet.crawler.model;

import java.util.Date;
import xsmeral.semnet.crawler.URLManager;

/**
 * The main entity used by {@link URLManager}.
 * Contains:
 * <br />
 * <ul>
 *  <li>ID (generated by DB)</li>
 *  <li>Host name</li>
 *  <li>Path, relative to the host name</li>
 *  <li>Date indicating when this URL has been last visited by the crawler</li>
 *  <li>Number of times this URL has been visited by the crawler</li>
 *  <li>Update frequency - how often this URL should be scraped</li>
 *  <li>An indication, whether this URL represents an entity or a source URL</li>
 *  <li>A regex pattern that matches path of this URL and identifies the
 *      corresponding EntityDescriptor</li>
 *  <li>An indication, whether this URL is working (whether there were any errors
 *      during last visit)</li>
 *  <li>Score - a number from -3 to 0, indicating likelihood of the URL to work</li>
 *
 * </ul>
 * 
 * @author Ron Å meral (xsmeral@fi.muni.cz)
 */
public class URLEntry {

    /**
     * Default update frequency for entity URLs.
     */
    public static final int DEF_ENTITY_UPDATE = URLEntry.UPDATE_YEAR;
    /**
     * Default update frequency for source URLs.
     */
    public static final int DEF_SOURCE_UPDATE = URLEntry.UPDATE_MONTH;
    /**
     * Number of seconds in a day.
     */
    public static final int DAY_SEC = 24 * 3600;
    /**
     * Daily update frequency.
     */
    public static final int UPDATE_DAY = DAY_SEC;
    /**
     * Weekly update frequency.
     */
    public static final int UPDATE_WEEK = 7 * DAY_SEC;
    /**
     * Monthly (30 days) update frequency.
     */
    public static final int UPDATE_MONTH = 30 * DAY_SEC;
    /**
     * Yearly (365 days) update frequency.
     */
    public static final int UPDATE_YEAR = 365 * DAY_SEC;
    /**
     * The lower bound of score. When URL entry reaches this score, it is marked as non-working.
     */
    public static final short SCORE_MIN = -3;
    //
    private int id;
    private String host;
    private String path;
    private Date lastVisited;
    private int visitCount;
    private int updateFreq;
    private boolean entity;
    private String pattern;
    private boolean working;
    private short score;

    public URLEntry() {
    }

    /**
     * This constructor is meant to be called only by URLManager, which populates it with values from DB.
     * {@linkplain #URLEntry(java.lang.String, java.lang.String, java.util.Date, int, int, boolean, java.lang.String, boolean) This constructor} should be used instead
     * @see URLManager
     */
    public URLEntry(int id, String host, String path, Date lastVisited, int visitCount, int updateFreq, boolean entity, String pattern, boolean working, short score) {
        this.id = id;
        this.host = host;
        this.path = path;
        this.lastVisited = lastVisited;
        this.visitCount = visitCount;
        this.updateFreq = updateFreq;
        this.entity = entity;
        this.pattern = pattern;
        this.working = working;
        this.score = score;
    }

    /**
     * This constructor is used to create instances that are to be added to DB using URLManager.
     * @see URLManager
     */
    public URLEntry(String host, String path, Date lastVisited, int visitCount, int updateFreq, boolean entity, String pattern, boolean working, short score) {
        this(0, host, path, lastVisited, visitCount, updateFreq, entity, pattern, working, score);
    }

    /**
     * Returns ID (generated by DB).
     * The ID is valid only if this instance was retrieved from URLManager.
     * @see URLManager
     */
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns Date indicating when this URL has been last visited by the crawler.
     */
    public Date getLastVisited() {
        return lastVisited;
    }

    public void setLastVisited(Date lastVisited) {
        this.lastVisited = lastVisited;
    }

    /**
     * Returns update frequency in seconds.
     */
    public int getUpdateFreq() {
        return updateFreq;
    }

    public void setUpdateFreq(int updateFreq) {
        this.updateFreq = updateFreq;
    }

    /**
     * Returns the full URL.
     */
    public String getUrl() {
        return host.substring(0, host.length() - 1) + path;
    }

    /**
     * Returns host path of the URL.
     */
    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Returns path part of the URL, relative to the host name.
     */
    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Returns number of times this URL has been visited by the crawler.
     */
    public int getVisitCount() {
        return visitCount;
    }

    public void setVisitCount(int visitCount) {
        this.visitCount = visitCount;
    }

    /**
     * Indicates whether this URL represents an entity or a source URL.
     */
    public boolean isEntity() {
        return entity;
    }

    public void setEntity(boolean entity) {
        this.entity = entity;
    }

    /**
     * Returns a regex pattern (as a string) that matches path of this URL
     * and identifies the corresponding EntityDescriptor.
     * @see EntityDescriptor
     */
    public String getPattern() {
        return pattern;
    }

    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Indicates whether this URL is working
     * (whether there were any errors during last visit by crawler).
     */
    public boolean isWorking() {
        return working;
    }

    public void setWorking(boolean working) {
        this.working = working;
    }

    /**
     * Returns a number indicating likelihood of the URL to work.
     */
    public short getScore() {
        return score;
    }

    public void setScore(short score) {
        this.score = score;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final URLEntry other = (URLEntry) obj;
        if (this.id != other.id) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 73 * hash + this.id;
        return hash;
    }

    @Override
    public String toString() {
        return getUrl();
    }
}
